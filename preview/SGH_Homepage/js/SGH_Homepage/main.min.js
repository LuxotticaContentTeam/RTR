(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Contents = void 0;
var _main = _interopRequireDefault(require("../../main"));
var _utils = require("../../modules/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Contents = exports.Contents = /*#__PURE__*/function () {
  function Contents(stateManger) {
    _classCallCheck(this, Contents);
    this.RTR = null;
    this.json = window.ct_RTRBannerHome.json;
    this.stateManger = stateManger;
    this.fistRender = false;
    this.init();
  }
  _createClass(Contents, [{
    key: "init",
    value: function init() {
      this.buildHtml();
      this.load();
      this.eventHandler();
    }
  }, {
    key: "buildHtml",
    value: function buildHtml() {
      this.container = document.querySelector('#ct_cm_RTR__container .ct_cm__contents');
      this.buildSkeletonAndStaticText();
      this.buildDynamicContent();
    }
  }, {
    key: "buildSkeletonAndStaticText",
    value: function buildSkeletonAndStaticText() {
      this.container.querySelector('.ct_cm__text').innerHTML = "\n            <h3 class=\"ct_cm_RTR__headline\">".concat((0, _utils.getTrad)(this.json.labels.headline, this.stateManger.infoStore), "</h3>\n            <div class=\"ct_cm_RTR__buttons\"></div>\n            <div class=\"ct_cm_RTR__titles\"></div>\n            <div class=\"ct_cm_RTR__cta\">\n                <a data-element-id=\"X_X_MainPlacement12_RTR-CTA0\" aria-label=\"").concat((0, _utils.getTrad)(this.json.labels.shop_now, this.stateManger.infoStore), "\">").concat((0, _utils.getTrad)(this.json.labels.shop_now, this.stateManger.infoStore), "</a>\n            </div>\n            <div class=\"ct_cm_RTR__bottom_text\"> ").concat((0, _utils.getTrad)(this.json.labels.bottom_text, this.stateManger.infoStore), "</div>\n        ");
      this.container.querySelector('.ct_cm_RTR__viewer').innerHTML = "\n            <div class=\"ct_cm_RTR__viewer_text\">\n                <span>".concat((0, _utils.getTrad)(this.json.labels.rotate, this.stateManger.infoStore), "</span>\n                <img src=\"https://media.sunglasshut.com/2023/utility/WOW/rtr/459.svg\">\n            </div>\n            <p id=\"ct_cm_RTR__viewer_cursor\">\n                ").concat((0, _utils.getTrad)(this.json.labels.cursor, this.stateManger.infoStore), "\n            </p>\n        ");
      this.cursor = this.container.querySelector("#ct_cm_RTR__viewer_cursor");
    }
  }, {
    key: "buildDynamicContent",
    value: function buildDynamicContent() {
      var _this = this;
      this.buttonsContainerHtml = this.container.querySelector('.ct_cm_RTR__buttons');
      this.titlesContainerHtml = this.container.querySelector('.ct_cm_RTR__titles');
      this.ctaHtml = this.container.querySelector('.ct_cm_RTR__cta a');
      Object.keys(this.json.products).forEach(function (key, i) {
        var button = document.createElement('button');
        button.classList.add('ct_cm_RTR__product');
        button.dataset.upc = key;
        button.dataset.elementId = "X_X_MainPlacement12_RTR";
        button.dataset.description = _this.json.products[key].name;
        button.ariaLabel = "Select ".concat(_this.json.products[key].name);
        button.innerHTML = "\n                <img src=\"".concat(_this.json.products[key].img, "\" alt=\"").concat(_this.json.products[key].name, "\"/>\n            ");
        button.onclick = function () {
          _this.updateProd(button);
        };
        _this.buttonsContainerHtml.appendChild(button);
        if (i === 0) {
          button.classList.add('active');
          _this.titlesContainerHtml.innerHTML = "\n                    <div class=\"ct_cm_RTR__title active\" data-upc=\"".concat(key, "\">\n                        <span>").concat(_this.json.products[key].brand, "</span>\n                        <h2>").concat(_this.json.products[key].name, "</h2>\n                    </div>\n                ");
          _this.ctaHtml.href = (0, _utils.getTrad)(_this.json.products[key].url, _this.stateManger.infoStore);
          _this.ctaHtml.dataset.descirption = key;
        }
      });
    }
  }, {
    key: "load",
    value: function load() {
      var _this2 = this;
      (0, _utils.eventCatcher)('ct_cm_rtr__loadData', function () {
        _this2.RTR = new _main.default({
          selector: '.ct_cm_RTR__viewer',
          version: "5.1.2",
          upc: Object.keys(_this2.json.products)[0],
          zoom: true,
          showBackground: true,
          clearColor: '#D9CDC4',
          backgroundPath: _this2.stateManger.device === 'desk' ? 'https://media.sunglasshut.com/utilities/WebEFX/RTR/preview/SGH_Homepage/static/RTRimages/SGH/bkg_rtr_full.jpg' : 'https://media.sunglasshut.com/utilities/WebEFX/RTR/preview/SGH_Homepage/static/RTRimages/SGH/bkg_rtr_full_m.jpg',
          //dev
          boundingAreaTopLeftX: _this2.stateManger.device === 'desk' ? .5 : 0,
          boundingAreaTopLeftY: _this2.stateManger.device === 'desk' ? 0 : _this2.stateManger.device === 'tab' ? .4 : .5,
          safeAreaEnabled: true,
          safeAreaWidthLeft: _this2.stateManger.device === 'desk' ? '0' : '20%',
          safeAreaWidthRight: _this2.stateManger.device === 'desk' ? '10%' : '20%',
          minDistance: .4,
          hotPositionsEnabled: true,
          hotPositions: [[0.00, 0.00, .5],
          //front
          [.5, 0.00, 0.00],
          //side left
          [-.5, 0.00, 0.00],
          //side right
          [0.30, -.2, .4] //front 3/4
          // [-.32,-.34,.6]
          ],
          initialPosition: [0.30, -.2, .4]
        });
      }, true);
      (0, _utils.eventCatcher)('ct_cm_rtr__loadModel', function () {
        _this2.RTR.init();
      }, true);
    }
  }, {
    key: "eventHandler",
    value: function eventHandler() {
      var _this3 = this;
      (0, _utils.eventCatcher)('ct_cm__RTR_rendered', function (_ref) {
        var id = _ref.id;
        if (id === _this3.RTR.selector) {
          if (!_this3.fistRender) {
            _this3.fistRender = true;
            _this3.container.querySelector('.ct_cm_RTR__viewer').addEventListener('mousemove', function (e) {
              _this3.cursor.style.top = "".concat(e.pageY - 8, "px");
              _this3.cursor.style.left = "".concat(e.pageX + 16, "px");
            });
          }
          document.querySelector('.ct_cm__loader').classList.add('ct_cm__loaded');
        }
      });
    }
  }, {
    key: "updateProd",
    value: function updateProd(button) {
      if (!button.classList.contains('active')) {
        if (this.buttonsContainerHtml.querySelector('.active')) {
          this.buttonsContainerHtml.querySelector('.active').classList.remove('active');
        }
        button.classList.add('active');
        this.titlesContainerHtml.querySelector('span').innerHTML = this.json.products[button.dataset.upc].brand;
        this.titlesContainerHtml.querySelector('h2').innerHTML = this.json.products[button.dataset.upc].name;
        this.ctaHtml.dataset.descirption = button.dataset.upc;
        this.ctaHtml.href = (0, _utils.getTrad)(this.json.products[button.dataset.upc].url, this.stateManger.infoStore);
        this.RTR.RTRViewr.setId({
          type: 'upc',
          value: button.dataset.upc
        });
        document.querySelector('.ct_cm__loader').classList.remove('ct_cm__loaded');
      }
    }
  }]);
  return Contents;
}();

},{"../../main":4,"../../modules/utils":7}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.infoStoreLocal = exports.infoStore = void 0;
var infoStoreLocal = exports.infoStoreLocal = function infoStoreLocal() {
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      var info_store = {
        lang: document.querySelector('#ct_lang').getAttribute('lang'),
        storeId: "12001",
        currency: "$",
        catalog: "",
        country: document.querySelector('#ct_lang').getAttribute('country'),
        langID: "-1"
      };
      resolve(info_store);
    }, 1000);
  });
};
var infoStore = exports.infoStore = function infoStore() {
  return new Promise(function (resolve, reject) {
    if (window.language && window.country) {
      var _info_store = {
        lang: window.language,
        storeId: window.storeId,
        catalog: window.catalogId,
        currency: window.currencySymbol,
        country: window.language + '-' + window.country.toLowerCase(),
        except_lang: currentCountry(),
        langID: langId
      };
      resolve(_info_store);
    } else {
      setTimeout(function () {
        info_store().then(resolve).catch(reject);
      }, 300);
    }
  });
};

},{}],3:[function(require,module,exports){
"use strict";

var _main = _interopRequireDefault(require("../../main"));
var _lazy = require("../../modules/lazy");
var _stateManager = _interopRequireDefault(require("../../modules/stateManager"));
var _utils = require("../../modules/utils");
var _contents = require("./contents");
var _info_store = require("./info_store");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var BannerHome = /*#__PURE__*/function () {
  function BannerHome() {
    _classCallCheck(this, BannerHome);
    this.stateManger = new _stateManager.default();
    window.ct_RTRBannerHome = this;
    this.init();
  }
  _createClass(BannerHome, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              (0, _utils.customLog)('started');
              _context.next = 3;
              return (0, _utils.checkStore)(this.stateManger.env, _info_store.infoStoreLocal, _info_store.infoStore);
            case 3:
              this.stateManger.infoStore = _context.sent;
              _context.next = 6;
              return (0, _utils.getData)();
            case 6:
              this.json = _context.sent;
              // this.json = clearData(this.rawJson)
              this.Contents = new _contents.Contents(this.stateManger);
              (0, _lazy.Lazy)({
                selector: '#ct_cm_RTR__container'
              });
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }]);
  return BannerHome;
}();
new BannerHome();

},{"../../main":4,"../../modules/lazy":5,"../../modules/stateManager":6,"../../modules/utils":7,"./contents":1,"./info_store":2}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("./modules/utils");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // import {ct_log, ct_get__device_type, eventCatcher} from './modules/utils';
/**
 * @typedef {Object} RTROptions
 * @property {string} version - RTR library version
 * @property {string} selector - The selector of the container element where the viewer will be embedded.
 * @property {string} upc - The UPC (Universal Product Code) associated with the product for real-time rendering visualization.
 * @property {string} zoom - The type of zoom in the real-time rendering viewer. Use 'dolly' for zoom, 'none' for no zoom.
 * @property {string} [hdr="https://media.sunglasshut.com/utilities/WebEFX/RTR/preview/SGH_Homepage/static/hdr/panorama_2_1.hdr"] - The path to the HDR environment map for real-time rendering.
 * @property {string} [env='production'] - The environment (e.g., 'development', 'production') for viewer metadata.
 * @property {boolean} [autoRotateCamera=false] - Whether to enable auto rotation of the camera in the real-time rendering viewer.
 * @property {boolean} [showBackground=true] - Whether to show the background in the real-time rendering viewer.
 * @property {string} [backgroundPath] - path of the background
 * @property {string} [clearColor='#fff'] - The clear color of the real-time rendering viewer background.
 * @property {boolean} [showEnvironment=false] - Whether to show the environment in the real-time rendering viewer.
 * @property {boolean} [safeAreaEnabled] - activate safe area
 * @property {string} [safeAreaLeft] - dimension of safe area left
 * @property {string} [safeAreaRight] - dimension of safe area right
 * @property {number} [minDistance] - set max zoom
 * 
*/
/**
 * Real-Time Rendering (RTR) class for creating an interactive 3D viewer with real-time rendering capabilities.
 *
 * @class
 * @classdesc Real-Time Rendering (RTR) class for creating an interactive 3D viewer with real-time rendering capabilities.
 *
 * @param {RTROptions} options - Configuration options for the RTR viewer.
 *
 * @property {Object} RTRViewr - The RTR viewer object.
 * @property {RTROptions} options - Configuration options for the RTR viewer.
 * @property {string} selector - The selector of the container element where the viewer will be embedded.
 * @property {string} upc - The UPC associated with the product for real-time rendering visualization.
 * @property {string} hdr - The path to the HDR environment map for real-time rendering.
 * @property {Object} metadata - Metadata for the real-time rendering viewer, including the environment.
 * @property {boolean} showEnvironment - Whether to show the environment in the real-time rendering viewer.
 * @property {boolean} autoRotateCamera - Whether to enable auto rotation of the camera in the real-time rendering viewer.
 * @property {boolean} showBackground - Whether to show the background in the real-time rendering viewer.
 * @property {string} clearColor - The clear color of the real-time rendering viewer background.
 * @property {string} zoom - The type of zoom in the real-time rendering viewer ('dolly' or 'none').
 *
 * @throws {Error} Throws an error if initialization fails.
 *
 * @example
 * // Example usage:
 * const rtrOptions = {
 *   selector: '#rtr-container',
 *   upc: '123456789',
 *   zoom: true,
 *   hdr: 'path/to/custom/hdr/file.hdr',
 *   env: 'development',
 *   autoRotateCamera: false,
 *   showBackground: true,
 *   clearColor: '#fff',
 *   showEnvironment: true,
 * };
 *
 * const rtrViewer = new RTR(rtrOptions);
 */
var RTR = exports.default = /*#__PURE__*/function () {
  function RTR(_ref) {
    var _this = this;
    var version = _ref.version,
      selector = _ref.selector,
      upc = _ref.upc,
      zoom = _ref.zoom,
      hdr = _ref.hdr,
      env = _ref.env,
      autoRotateCamera = _ref.autoRotateCamera,
      showBackground = _ref.showBackground,
      backgroundPath = _ref.backgroundPath,
      clearColor = _ref.clearColor,
      showEnvironment = _ref.showEnvironment,
      boundingAreaTopLeftX = _ref.boundingAreaTopLeftX,
      boundingAreaTopLeftY = _ref.boundingAreaTopLeftY,
      boundingAreaBottomRightX = _ref.boundingAreaBottomRightX,
      boundingAreaBottomRightY = _ref.boundingAreaBottomRightY,
      minDistance = _ref.minDistance,
      safeAreaEnabled = _ref.safeAreaEnabled,
      safeAreaWidthLeft = _ref.safeAreaWidthLeft,
      safeAreaWidthRight = _ref.safeAreaWidthRight,
      initialPosition = _ref.initialPosition,
      hotPositionsEnabled = _ref.hotPositionsEnabled,
      hotPositions = _ref.hotPositions;
    _classCallCheck(this, RTR);
    window.ct_RTR = this;
    this.RTRViewr = null;
    this.selector = selector;
    this.upc = upc;
    this.hdr = hdr || "https://media.sunglasshut.com/utilities/WebEFX/RTR/preview/SGH_Homepage/static/hdr/panorama_2_1.hdr"; // if not defined takes automatically the hdr in the static folder  and in prod https://media.BRAND.com/utilities/WebEFX/RTR/hdr/panorama_2_1.hdr 
    this.metadata = env ? {
      env: env
    } : {
      env: 'production'
    };
    this.showEnvironment = showEnvironment ? showEnvironment : false;
    this.autoRotateCamera = autoRotateCamera ? autoRotateCamera : false;
    this.showBackground = showBackground ? showBackground : true;
    this.clearColor = clearColor ? clearColor : "#fff";
    this.zoom = zoom ? 'dolly' : 'none';
    this.backgroundPath = backgroundPath ? backgroundPath : '';
    this.boundingAreaTopLeftX = boundingAreaTopLeftX ? boundingAreaTopLeftX : 0, this.boundingAreaTopLeftY = boundingAreaTopLeftY ? boundingAreaTopLeftY : 0, this.boundingAreaBottomRightX = boundingAreaBottomRightX ? boundingAreaBottomRightX : 1, this.boundingAreaBottomRightY = boundingAreaBottomRightY ? boundingAreaBottomRightY : 1, this.safeAreaEnabled = safeAreaEnabled ? true : false, this.safeAreaWidthLeft = safeAreaWidthLeft ? safeAreaWidthLeft : "15%";
    this.safeAreaWidthRight = safeAreaWidthRight ? safeAreaWidthRight : "15%";
    this.minDistance = minDistance ? minDistance : false;
    this.initialPosition = initialPosition ? initialPosition : false;
    this.hotPositionsEnabled = hotPositionsEnabled ? true : false;
    this.hotPositions = hotPositions ? hotPositions : [];
    this.isRotating = false;
    this.isReady = false;
    this.isFirsfitRender = true;
    this.camera = null;
    (0, _utils.loadScript)("https://media.sunglasshut.com/utilities/WebEFX/RTR/preview/SGH_Homepage/static/lib/v/".concat(version, "/main.js"), function () {
      _this.isReady = true;
    });
  }
  _createClass(RTR, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this2 = this;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _utils.checkData)();
            case 2:
              this.RTRViewr = window.rtrViewer;
              this.RTRViewr.init({
                data: {
                  selector: this.selector,
                  id: {
                    type: 'upc',
                    value: this.upc
                  },
                  environmentPath: this.hdr,
                  backgroundPath: this.backgroundPath,
                  settings: {
                    showEnvironment: this.showEnvironment,
                    showBackground: this.showBackground,
                    clearColor: this.clearColor,
                    orbitPoint: false,
                    pixelRatio: Math.min(window.devicePixelRatio, 2),
                    autoRotateCamera: this.autoRotateCamera,
                    //bounding area
                    boundingArea: {
                      topLeft: {
                        x: this.boundingAreaTopLeftX,
                        y: this.boundingAreaTopLeftY
                      },
                      bottomRight: {
                        x: this.boundingAreaBottomRightX,
                        y: this.boundingAreaBottomRightY
                      }
                    },
                    // gesture
                    gestures: {
                      mouse: {
                        left: 'rotate',
                        middle: 'none',
                        right: 'pan',
                        wheel: this.zoom
                      },
                      touches: {
                        one: 'rotate',
                        two: 'dolly-pan',
                        three: 'dolly-pan'
                      }
                    }
                  }
                },
                metadata: this.metadata,
                callbacks: {
                  onRendered: function onRendered() {
                    (0, _utils.eventDispatch)('ct_cm__RTR_rendered', {
                      id: _this2.selector
                    });
                    if (_this2.isFirsfitRender) {
                      _this2.isFirsfitRender = false;
                      _this2.customSettings();
                    }
                    if (_this2.initialPosition) {
                      _this2.setInitialPosition();
                    }
                  },
                  onActions: function onActions(_ref2) {
                    var actions = _ref2.actions;
                    if (actions.rotate) {
                      _this2.isRotating = true;
                      (0, _utils.eventDispatch)('ct_cm__RTR_startRotate', {
                        id: _this2.selector,
                        rotate: actions.rotate
                      });
                    } else {
                      if (_this2.isRotating) {
                        _this2.isRotating = false;
                        (0, _utils.eventDispatch)('ct_cm__RTR_endRotate', {
                          id: _this2.selector,
                          rotate: actions.rotate
                        });
                      }
                    }
                    (0, _utils.eventDispatch)('ct_cm__RTR_actions', {
                      id: _this2.selector,
                      actions: actions
                    });
                  },
                  onFocus: function onFocus(_ref3) {
                    var focus = _ref3.focus;
                    (0, _utils.eventDispatch)('ct_cm__RTR_focus', {
                      id: _this2.selector,
                      focus: focus
                    });
                    _this2.isFocus = focus;
                  },
                  onError: function onError(_ref4) {
                    var code = _ref4.code,
                      context = _ref4.context,
                      error = _ref4.error;
                    console.log('RTR - Error code:', code);
                    console.log('RTR - Error context:', context);
                    console.error(error);
                  }
                }
              });
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "setSafeArea",
    value: function setSafeArea() {
      document.querySelector(this.selector).classList.add('ct_cm_RTR__safe_area_enabled');
      this.boundingArea = document.querySelector("".concat(this.selector, " #rtr-bounding-area"));
      var safeAreaLeft = document.createElement('span');
      var safeAreaRight = document.createElement('span');
      safeAreaLeft.style.cssText = "\n            position:absolute;\n            top:0;\n            left:0;\n            width:".concat(this.safeAreaWidthLeft, ";\n            height:100%;\n            pointer-events:all;\n\n        ");
      safeAreaRight.style.cssText = "\n            position:absolute;\n            top:0;\n            right:0;\n            width:".concat(this.safeAreaWidthRight, ";\n            height:100%;\n            pointer-events:all;\n\n        ");
      this.boundingArea.appendChild(safeAreaLeft);
      this.boundingArea.appendChild(safeAreaRight);
    }
  }, {
    key: "customSettings",
    value: function customSettings() {
      this.camera = this.RTRViewr.getCameraControls();
      if (this.safeAreaEnabled) {
        this.setSafeArea();
      }
      if (this.minDistance) {
        this.camera.minDistance = this.minDistance;
      }
      if (this.hotPositionsEnabled) {
        this.hotPositionsHandler();
      }
    }
  }, {
    key: "hotPositionsHandler",
    value: function hotPositionsHandler() {
      var _this3 = this;
      if (this.hotPositions.length === 0) {
        (0, _utils.customLog)('no hot position set', '', 'err');
      } else {
        (0, _utils.eventCatcher)('ct_cm__RTR_startRotate', function () {
          if (_this3.rotateTimer) clearTimeout(_this3.rotateTimer);
        });
        (0, _utils.eventCatcher)('ct_cm__RTR_endRotate', function () {
          _this3.rotateTimer = setTimeout(_this3.setHotPosition.bind(_this3), 1000);
        });
      }
    }
  }, {
    key: "setHotPosition",
    value: function setHotPosition() {
      if (!this.isFocus) {
        var currentPos = this.camera.getPosition();
        var closestPoint = (0, _utils.getClosestPoint)([currentPos.x, currentPos.y, currentPos.z], this.hotPositions);
        this.camera.setPosition(closestPoint[0], closestPoint[1], closestPoint[2], true);
      }
    }
  }, {
    key: "setInitialPosition",
    value: function setInitialPosition() {
      var _this$camera;
      (_this$camera = this.camera).setPosition.apply(_this$camera, _toConsumableArray(this.initialPosition).concat([true]));
    }
  }]);
  return RTR;
}();

},{"./modules/utils":7}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Lazy = void 0;
var _utils = require("./utils");
var getIntersect = function getIntersect(entries) {
  entries.forEach(function (entry) {
    if (entry.isIntersecting) {
      // console.log(entry.intersectionRatio)
      if (entry.intersectionRatio < .6) {
        (0, _utils.eventDispatch)('ct_cm_rtr__loadData');
      } else {
        (0, _utils.eventDispatch)('ct_cm_rtr__loadData');
        (0, _utils.eventDispatch)('ct_cm_rtr__loadModel');
      }
    }
  });
};
var Lazy = exports.Lazy = function Lazy(_ref) {
  var _ref$offset = _ref.offset,
    offset = _ref$offset === void 0 ? 100 : _ref$offset,
    selector = _ref.selector;
  var options = {
    rootMargin: "".concat(offset, "px"),
    threshold: [0, .6]
  };
  var observer = new IntersectionObserver(getIntersect, options);
  observer.observe(document.querySelector(selector));
};

},{"./utils":7}],6:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("./utils");
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var StateManager = /*#__PURE__*/_createClass(function StateManager() {
  _classCallCheck(this, StateManager);
  this.env = "development";
  this.device = (0, _utils.getDeviceType)({
    desk_min: 1025,
    tab_max: 1024,
    tab_min: 768,
    mob_max: 767
  });
});
var _default = exports.default = StateManager;

},{"./utils":7}],7:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getData = exports.getClosestPoint = exports.eventDispatch = exports.eventCatcher = exports.customLog = exports.clearData = exports.checkStore = exports.checkData = void 0;
exports.getDeviceType = getDeviceType;
exports.getTrad = void 0;
exports.isMobile = isMobile;
exports.loadScript = void 0;
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// import { ct_sm__active_slide } from '../config_modules/slick_utils';

// check if mobile
function isMobile(breakpoints) {
  if (window.innerWidth > breakpoints.mob_max) {
    return false;
  } else {
    return true;
  }
}

/**
 * Determines the type of device based on the window width and specified breakpoints.
 *
 * @param {Object} breakpoints - Object containing breakpoint values.
 * @param {number} breakpoints.tab_max - Maximum width for tablet devices.
 * @param {number} breakpoints.mob_max - Maximum width for mobile devices.
 * @param {number} breakpoints.desk_min - Minimum width for desktop devices.
 * @param {number} breakpoints.tab_min - Minimum width for tablet devices.
 *
 * @returns {string} - The type of device ('desk' for desktop, 'tab' for tablet, 'mob' for mobile).
 */
function getDeviceType(breakpoints) {
  if (window.innerWidth > breakpoints.tab_max) {
    return 'desk';
  }
  if (window.innerWidth > breakpoints.mob_max && window.innerWidth < breakpoints.desk_min) {
    return 'tab';
  }
  if (window.innerWidth < breakpoints.tab_min) {
    return 'mob';
  }
}

/**
 * Custom log
 * @param {String} log - Main message
 * @param {String} style - Add extra style
 * @param {String} type - "err" for error log, "wait" for wait log
*/
var customLog = exports.customLog = function customLog(log, style) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  // if (window.ct_SUPERNOVA.env === 'development' || localStorage.getItem("dev") == "true"){
  if (type == "err") {
    console.log('%c ' + '[RTR]  ' + log, "background: red;padding:2px 6px; border-radius:8px; color:#fff;font-family:sans-serif;font-size:14px; ".concat(style, ";"));
  }
  if (type == "wait") {
    console.log('%c ' + '[RTR]  ' + log, "background: #ceb000;padding:2px 4px; border-radius:4px; color:#000;font-family:sans-serif;font-size:14px; ".concat(style, ";"));
  }
  if (type == '') {
    console.log('%c ' + '[RTR]  ' + log, "background: #650601;padding:4px 8px; border-radius:6px; color:#fff;font-family:sans-serif;font-size:14px; ".concat(style, ";"));
  }
  // }
};

/**
 * Registers an event listener for a specified event name and invokes a callback function when the event occurs.
 *
 * @param {string} name - The name of the event to listen for.
 * @param {function} cb - The callback function to be invoked when the event occurs.
 * @param {boolean} [once=false] - A flag indicating whether the event listener should only be invoked once.
 *
 * @typedef {Object} Event
 * @property {any} detail - The detail property of the event object.
 *
 * @example
 * // Example usage:
 * eventCatcher('customEvent', (data) => {
 *   console.log('Event caught with data:', data);
 * }, true); // Registers a one-time event listener
 */
var eventCatcher = exports.eventCatcher = function eventCatcher(name, cb) {
  var once = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  /**
  * @type {Event} e - The event object passed to the callback.
  * @property {any} e.detail - The detail property of the event.
  */
  window.addEventListener(name, function (e) {
    cb(e.detail);
  }, {
    once: once
  });
};

/**
 * Dispatches a custom event on the window with an optional detail object.
 *
 * @param {string} event - The name of the custom event to dispatch.
 * @param {any} [detail=undefined] - An optional detail object to include with the event.
 * @returns {void}
 */
var eventDispatch = exports.eventDispatch = function eventDispatch(event) {
  var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  /**
  * @typedef {CustomEvent} CustomEvent - A custom event object.
  * @property {any} detail - The detail property of the custom event.
  */

  /**
   * Creates a new custom event with the specified name and detail.
   *
   * @type {CustomEvent}
   */
  var eventToDispatch = new CustomEvent(event, {
    detail: detail
  });
  window.dispatchEvent(eventToDispatch);
};
/**
 * Retrieves a translated value based on the provided field, store information,
 * and fallback logic for country and language.
 *
 * @param {string | object} field - The field to be translated. It can be a string or an object with translations.
 * @param {Object} storeInfo - Object containing store information.
 * @param {string} storeInfo.country - The country code for localization.
 * @param {string} storeInfo.lang - The language code for localization.
 *
 * @returns {string} - The translated value based on the provided field and store information,
 *                    with fallbacks for country and language.
 */
var getTrad = exports.getTrad = function getTrad(field, storeInfo) {
  var country = storeInfo.country;
  var lang = storeInfo.lang;
  if (field === undefined || field === '') return '';
  if (typeof field === 'string') return field;
  var keys = Object.keys(field);
  if (keys.includes(country)) return field[country];
  if (keys.includes(lang)) return field[lang];
  if (keys.includes('en-us')) return field['en-us'];
  if (keys.includes('en')) return field['en'];
  return field[0];
};

/**
 * Asynchronous function to check the environment and execute a specific store function.
 *
 * @param {string} env - The environment ('development' or other).
 * @param {Function} infoStoreLocal - The function to execute in the 'development' environment.
 * @param {Function} infoStore - The function to execute in environments other than 'development'.
 * @returns {Promise} A promise that resolves when the appropriate store function is executed.
 */
var checkStore = exports.checkStore = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(env, infoStoreLocal, infoStore) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            if (env === 'development') {
              infoStoreLocal().then(function (infoStore) {
                resolve(infoStore);
              });
            } else {
              infoStore().then(function (infoStore) {
                console.log(infoStore);
                resolve(infoStore);
              });
            }
          }));
        case 1:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function checkStore(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Asynchronous function to fetch and parse JSON data.
 *
 * @returns {Promise<Object>} A promise that resolves to the parsed JSON data.
 *
 * @throws {Error} Throws an error if the fetch or JSON parsing fails.
 *
 * @example
 * // Example usage:
 * try {
 *   const jsonData = await getData();
 *   console.log('Fetched JSON data:', jsonData);
 * } catch (error) {
 *   console.error('Error fetching or parsing JSON:', error.message);
 * }
 */
var getData = exports.getData = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var response, json;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return fetch("./json/SGH_Homepage/json.json");
        case 3:
          response = _context2.sent;
          if (response.ok) {
            _context2.next = 6;
            break;
          }
          throw new Error("Failed to fetch data. Status: ".concat(response.status));
        case 6:
          _context2.next = 8;
          return response.json();
        case 8:
          json = _context2.sent;
          return _context2.abrupt("return", json);
        case 12:
          _context2.prev = 12;
          _context2.t0 = _context2["catch"](0);
          throw new Error("Error fetching or parsing JSON: ".concat(_context2.t0.message));
        case 15:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 12]]);
  }));
  return function getData() {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * Asynchronous function to check data and resolve the promise with the data if available.
 *
 * @param {any} dataToCheck - The data to check.
 * @returns {Promise<any>} A promise that resolves with the checked data.
 *
 * @throws {Error} Throws an error if the data check fails after the specified timeout.
 *
 * @example
 * // Example usage:
 * checkData(someData)
 *   .then((checkedData) => {
 *      console.log('Data is valid:', checkedData);
 *   })
 *   .catch((error) => {
 *      console.error('Error checking data:', error.message);
 *   });
 */
var checkData = exports.checkData = function checkData() {
  /**
   * @typedef {Object} Error
   * @property {string} message - The error message.
   */

  return new Promise(function (resolve, reject) {
    if (window.rtrViewer) {
      resolve(window.rtrViewer);
    } else {
      /**
       * Asynchronous function to retry the data check after a timeout.
       *
       * @returns {Promise<any>} A promise that resolves with the checked data.
       */
      var retryDataCheck = function retryDataCheck() {
        return checkData().then(resolve).catch(reject);
      };

      // Retry data check after a timeout of 300 milliseconds
      setTimeout(retryDataCheck, 300);
    }
  });
};
var clearData = exports.clearData = function clearData(rawJson, country) {
  var currentCountry = country;
  var finalJson = [];
  rawJson.forEach(function (elem) {
    if (!elem.countries && !elem.exceptCountries) {
      finalJson.push(elem);
    } else if ((!elem.countries || elem.countries === 'ALL') && (!elem.exceptCountries || elem.exceptCountries.length == 0 || !elem.exceptCountries.includes(currentCountry))) {
      finalJson.push(elem);
    } else if (!!elem.countries && elem.countries.includes(currentCountry)) {
      finalJson.push(elem);
    }
  });
  return finalJson;
};

/**
 * Load an external script by dynamically injecting a <script> tag into the DOM.
 *
 * @param {string} src - The source URL of the script to be loaded.
 * @param {function} callback - The callback function to be executed once the script is loaded.
 *
 * @example
 * // Example usage:
 * loadScript('https://example.com/script.js', () => {
 *   console.log('Script loaded successfully');
 *   // Your code to execute after the script is loaded
 * });
 *
 * @throws {Error} Throws an error if the script loading fails.
 */
var loadScript = exports.loadScript = function loadScript(src, callback) {
  /**
   * @typedef {Object} Error
   * @property {string} message - The error message.
   */

  // Create a script element
  var script = document.createElement('script');
  script.src = src;
  script.async = true;

  // Attach the script element to the document head
  document.head.appendChild(script);

  // Set up a callback for script load event
  script.onload = function () {
    if (callback) callback();
  };

  // Set up a callback for script error event
  script.onerror = function () {
    document.head.removeChild(script);
    if (callback) callback(new Error("Failed to load script: ".concat(src)));
  };
  return callback;
};

/**
 * Finds the closest point to a given position from a list of positions.
 *
 * @param {number[]} currentPos - The current position as an array of three numbers [x, y, z].
 * @param {number[][]} posList - An array of positions, each represented as an array of three numbers [x, y, z].
 * @return {number[]} - The closest point in the posList to the currentPos.
 */
var getClosestPoint = exports.getClosestPoint = function getClosestPoint(currentPos, posList) {
  var minDist = null;
  var minDistIndex = null;
  var currentDist = 0;
  posList.forEach(function (pos, i) {
    currentDist = Math.pow(currentPos[0] - pos[0], 2) + Math.pow(currentPos[1] - pos[1], 2) + Math.pow(currentPos[2] - pos[2], 2);
    if (!minDist || currentDist < minDist) {
      minDist = currentDist;
      minDistIndex = i;
    }
  });
  return posList[minDistIndex];
};

},{}]},{},[3]);
