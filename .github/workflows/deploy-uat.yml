name: Deploy to Akamai UAT

on:
  workflow_dispatch:

jobs:   
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.0.0'

      - name: Get node version
        id: node
        run: |
          echo "::set-output name=version::$(node -v)"
      
      - name: Get node_modules cache
        uses: actions/cache@v3.0.2
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}-${{ steps.node.outputs.version }}

      - run: npm install
      - run: npm run build --akamai_env="UAT"

      - name: Save generated files
        run: |
          # this generate a file that contains the absolute path of the files
          find dist -type f -exec echo "\"{}\"," \; | sed "s#dist/#${{ vars.UAT_URL }}#g" > generated_files.json

      - name: Upload generated files
        uses: actions/upload-artifact@v2
        with:
          name: generated-files
          path: generated_files.json

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.ID_RSA }}
          name: id_rsa
          known_hosts: |
            luxottica-media.sftp.upload.akamai.com ${{ secrets.ID_RSA_PUB }}
          if_key_exists: replace
      
      - name: Deploy on Akamai
        run: | 
          cat /home/runner/.ssh/known_hosts 
          scp -o "StrictHostKeyChecking no" -o PubkeyAcceptedKeyTypes=+ssh-dss -o HostKeyAlgorithms=+ssh-dss -i /home/runner/.ssh/id_rsa  -rp ${{ vars.SOURCE_FOLDER }} sshacs@luxottica-media.sftp.upload.akamai.com:${{ vars.DEST_FOLDER_UAT }}

  clean-cache:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    env:
      CACHE_CLIENT_TOKEN: ${{ secrets.CACHE_CLIENT_TOKEN }}
      CACHE_CLIENT_SECRET: ${{ secrets.CACHE_CLIENT_SECRET }}
      CACHE_ACCESS_TOKEN: ${{ secrets.CACHE_ACCESS_TOKEN }}
      CACHE_BASE_URI: ${{ secrets.CACHE_BASE_URI }}
    steps:
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.15.0'

      - name: Download generated files
        uses: actions/download-artifact@v2
        with:
          name: generated-files
          path: .

      - name: Clean Cache 
        run: |
          # Read json file
          GENERATED_FILES=$(cat generated_files.json)
          echo "Path being cleaned:"
          echo "${GENERATED_FILES}"

          touch .env
          echo CACHE_CLIENT_TOKEN=$CACHE_CLIENT_TOKEN > .env
          echo CACHE_CLIENT_SECRET=$CACHE_CLIENT_SECRET > .env
          echo CACHE_ACCESS_TOKEN=$CACHE_ACCESS_TOKEN > .env
          echo CACHE_BASE_URI=$CACHE_BASE_URI > .env
          echo PATH_FILES_TO_CLEAN=$(cat generated_files.json) > .env
          # cat .env

          npm install akamai-edgegrid   
          npm install dotenv

          node -e '
            require("dotenv").config();

            const CACHE_CLIENT_TOKEN = process.env.CACHE_CLIENT_TOKEN
            const CACHE_CLIENT_SECRET = process.env.CACHE_CLIENT_SECRET
            const CACHE_ACCESS_TOKEN = process.env.CACHE_ACCESS_TOKEN
            const CACHE_BASE_URI = process.env.CACHE_BASE_URI
            const GENERATED_FILES = process.env.PATH_FILES_TO_CLEAN.slice(0, -1);

            var EdgeGrid = require("akamai-edgegrid");

            console.log("======== Files being cleaning");
            let PATH_LIST = JSON.parse("[" + GENERATED_FILES + "]");
            console.log(PATH_LIST);

            var eg = new EdgeGrid(CACHE_CLIENT_TOKEN, CACHE_CLIENT_SECRET, CACHE_ACCESS_TOKEN, CACHE_BASE_URI);

            eg.auth({
              path: "/ccu/v3/invalidate/url/production",
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Accept": "application/json"
                },
                body: {
                  objects: PATH_LIST
                }
                
            });
                
            eg.send(function(error, response, body) {
              if(response){
                console.log("======== Cache cleaned");
                console.log(response);
              }
              if(error){
                console.log("========= Error on cleaning cache");
                console.log(error.response.data);
              }
            });
          '
